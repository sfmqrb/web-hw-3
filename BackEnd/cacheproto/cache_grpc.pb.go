// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_cache_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CacheManagementClient is the client API for CacheManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheManagementClient interface {
	CacheNoteRPC(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error)
}

type cacheManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheManagementClient(cc grpc.ClientConnInterface) CacheManagementClient {
	return &cacheManagementClient{cc}
}

func (c *cacheManagementClient) CacheNoteRPC(ctx context.Context, in *CacheRequest, opts ...grpc.CallOption) (*CacheResponse, error) {
	out := new(CacheResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.CacheManagement/CacheNoteRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheManagementServer is the server API for CacheManagement service.
// All implementations must embed UnimplementedCacheManagementServer
// for forward compatibility
type CacheManagementServer interface {
	CacheNoteRPC(context.Context, *CacheRequest) (*CacheResponse, error)
	mustEmbedUnimplementedCacheManagementServer()
}

// UnimplementedCacheManagementServer must be embedded to have forward compatible implementations.
type UnimplementedCacheManagementServer struct {
}

func (UnimplementedCacheManagementServer) CacheNoteRPC(context.Context, *CacheRequest) (*CacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheNoteRPC not implemented")
}
func (UnimplementedCacheManagementServer) mustEmbedUnimplementedCacheManagementServer() {}

// UnsafeCacheManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheManagementServer will
// result in compilation errors.
type UnsafeCacheManagementServer interface {
	mustEmbedUnimplementedCacheManagementServer()
}

func RegisterCacheManagementServer(s grpc.ServiceRegistrar, srv CacheManagementServer) {
	s.RegisterService(&CacheManagement_ServiceDesc, srv)
}

func _CacheManagement_CacheNoteRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheManagementServer).CacheNoteRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.CacheManagement/CacheNoteRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheManagementServer).CacheNoteRPC(ctx, req.(*CacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CacheManagement_ServiceDesc is the grpc.ServiceDesc for CacheManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CacheManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usermgmt.CacheManagement",
	HandlerType: (*CacheManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CacheNoteRPC",
			Handler:    _CacheManagement_CacheNoteRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cache.proto",
}
