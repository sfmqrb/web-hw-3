// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_cache_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CacheManagementClient is the client API for CacheManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheManagementClient interface {
	CacheNoteRPC(ctx context.Context, in *CacheNoteRequest, opts ...grpc.CallOption) (CacheManagement_CacheNoteRPCClient, error)
	CacheLoginRPC(ctx context.Context, in *CacheLoginRequest, opts ...grpc.CallOption) (CacheManagement_CacheLoginRPCClient, error)
}

type cacheManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheManagementClient(cc grpc.ClientConnInterface) CacheManagementClient {
	return &cacheManagementClient{cc}
}

func (c *cacheManagementClient) CacheNoteRPC(ctx context.Context, in *CacheNoteRequest, opts ...grpc.CallOption) (CacheManagement_CacheNoteRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &CacheManagement_ServiceDesc.Streams[0], "/usermgmt.CacheManagement/CacheNoteRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheManagementCacheNoteRPCClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CacheManagement_CacheNoteRPCClient interface {
	Recv() (*CacheNoteResponse, error)
	grpc.ClientStream
}

type cacheManagementCacheNoteRPCClient struct {
	grpc.ClientStream
}

func (x *cacheManagementCacheNoteRPCClient) Recv() (*CacheNoteResponse, error) {
	m := new(CacheNoteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cacheManagementClient) CacheLoginRPC(ctx context.Context, in *CacheLoginRequest, opts ...grpc.CallOption) (CacheManagement_CacheLoginRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &CacheManagement_ServiceDesc.Streams[1], "/usermgmt.CacheManagement/CacheLoginRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheManagementCacheLoginRPCClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CacheManagement_CacheLoginRPCClient interface {
	Recv() (*CacheLoginResponse, error)
	grpc.ClientStream
}

type cacheManagementCacheLoginRPCClient struct {
	grpc.ClientStream
}

func (x *cacheManagementCacheLoginRPCClient) Recv() (*CacheLoginResponse, error) {
	m := new(CacheLoginResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CacheManagementServer is the server API for CacheManagement service.
// All implementations must embed UnimplementedCacheManagementServer
// for forward compatibility
type CacheManagementServer interface {
	CacheNoteRPC(*CacheNoteRequest, CacheManagement_CacheNoteRPCServer) error
	CacheLoginRPC(*CacheLoginRequest, CacheManagement_CacheLoginRPCServer) error
	mustEmbedUnimplementedCacheManagementServer()
}

// UnimplementedCacheManagementServer must be embedded to have forward compatible implementations.
type UnimplementedCacheManagementServer struct {
}

func (UnimplementedCacheManagementServer) CacheNoteRPC(*CacheNoteRequest, CacheManagement_CacheNoteRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method CacheNoteRPC not implemented")
}
func (UnimplementedCacheManagementServer) CacheLoginRPC(*CacheLoginRequest, CacheManagement_CacheLoginRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method CacheLoginRPC not implemented")
}
func (UnimplementedCacheManagementServer) mustEmbedUnimplementedCacheManagementServer() {}

// UnsafeCacheManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheManagementServer will
// result in compilation errors.
type UnsafeCacheManagementServer interface {
	mustEmbedUnimplementedCacheManagementServer()
}

func RegisterCacheManagementServer(s grpc.ServiceRegistrar, srv CacheManagementServer) {
	s.RegisterService(&CacheManagement_ServiceDesc, srv)
}

func _CacheManagement_CacheNoteRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CacheNoteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CacheManagementServer).CacheNoteRPC(m, &cacheManagementCacheNoteRPCServer{stream})
}

type CacheManagement_CacheNoteRPCServer interface {
	Send(*CacheNoteResponse) error
	grpc.ServerStream
}

type cacheManagementCacheNoteRPCServer struct {
	grpc.ServerStream
}

func (x *cacheManagementCacheNoteRPCServer) Send(m *CacheNoteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CacheManagement_CacheLoginRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CacheLoginRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CacheManagementServer).CacheLoginRPC(m, &cacheManagementCacheLoginRPCServer{stream})
}

type CacheManagement_CacheLoginRPCServer interface {
	Send(*CacheLoginResponse) error
	grpc.ServerStream
}

type cacheManagementCacheLoginRPCServer struct {
	grpc.ServerStream
}

func (x *cacheManagementCacheLoginRPCServer) Send(m *CacheLoginResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CacheManagement_ServiceDesc is the grpc.ServiceDesc for CacheManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CacheManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usermgmt.CacheManagement",
	HandlerType: (*CacheManagementServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CacheNoteRPC",
			Handler:       _CacheManagement_CacheNoteRPC_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CacheLoginRPC",
			Handler:       _CacheManagement_CacheLoginRPC_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cache.proto",
}
